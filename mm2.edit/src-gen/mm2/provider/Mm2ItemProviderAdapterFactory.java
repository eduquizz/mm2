/**
 */
package mm2.provider;

import java.util.ArrayList;
import java.util.Collection;

import mm2.util.Mm2AdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Mm2ItemProviderAdapterFactory extends Mm2AdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Mm2ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link mm2.Questionnaire} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestionnaireItemProvider questionnaireItemProvider;

	/**
	 * This creates an adapter for a {@link mm2.Questionnaire}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestionnaireAdapter() {
		if (questionnaireItemProvider == null) {
			questionnaireItemProvider = new QuestionnaireItemProvider(this);
		}

		return questionnaireItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mm2.PageQuestion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageQuestionItemProvider pageQuestionItemProvider;

	/**
	 * This creates an adapter for a {@link mm2.PageQuestion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageQuestionAdapter() {
		if (pageQuestionItemProvider == null) {
			pageQuestionItemProvider = new PageQuestionItemProvider(this);
		}

		return pageQuestionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mm2.PageSoumission} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageSoumissionItemProvider pageSoumissionItemProvider;

	/**
	 * This creates an adapter for a {@link mm2.PageSoumission}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageSoumissionAdapter() {
		if (pageSoumissionItemProvider == null) {
			pageSoumissionItemProvider = new PageSoumissionItemProvider(this);
		}

		return pageSoumissionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mm2.PageResultat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageResultatItemProvider pageResultatItemProvider;

	/**
	 * This creates an adapter for a {@link mm2.PageResultat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageResultatAdapter() {
		if (pageResultatItemProvider == null) {
			pageResultatItemProvider = new PageResultatItemProvider(this);
		}

		return pageResultatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mm2.Question} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestionItemProvider questionItemProvider;

	/**
	 * This creates an adapter for a {@link mm2.Question}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestionAdapter() {
		if (questionItemProvider == null) {
			questionItemProvider = new QuestionItemProvider(this);
		}

		return questionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mm2.Reponse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReponseItemProvider reponseItemProvider;

	/**
	 * This creates an adapter for a {@link mm2.Reponse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReponseAdapter() {
		if (reponseItemProvider == null) {
			reponseItemProvider = new ReponseItemProvider(this);
		}

		return reponseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mm2.BoutonSoumettre} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoutonSoumettreItemProvider boutonSoumettreItemProvider;

	/**
	 * This creates an adapter for a {@link mm2.BoutonSoumettre}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoutonSoumettreAdapter() {
		if (boutonSoumettreItemProvider == null) {
			boutonSoumettreItemProvider = new BoutonSoumettreItemProvider(this);
		}

		return boutonSoumettreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mm2.BoutonSuivant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoutonSuivantItemProvider boutonSuivantItemProvider;

	/**
	 * This creates an adapter for a {@link mm2.BoutonSuivant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoutonSuivantAdapter() {
		if (boutonSuivantItemProvider == null) {
			boutonSuivantItemProvider = new BoutonSuivantItemProvider(this);
		}

		return boutonSuivantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mm2.BoutonRetour} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoutonRetourItemProvider boutonRetourItemProvider;

	/**
	 * This creates an adapter for a {@link mm2.BoutonRetour}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoutonRetourAdapter() {
		if (boutonRetourItemProvider == null) {
			boutonRetourItemProvider = new BoutonRetourItemProvider(this);
		}

		return boutonRetourItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mm2.Etiquette} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EtiquetteItemProvider etiquetteItemProvider;

	/**
	 * This creates an adapter for a {@link mm2.Etiquette}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEtiquetteAdapter() {
		if (etiquetteItemProvider == null) {
			etiquetteItemProvider = new EtiquetteItemProvider(this);
		}

		return etiquetteItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (questionnaireItemProvider != null)
			questionnaireItemProvider.dispose();
		if (pageQuestionItemProvider != null)
			pageQuestionItemProvider.dispose();
		if (pageSoumissionItemProvider != null)
			pageSoumissionItemProvider.dispose();
		if (pageResultatItemProvider != null)
			pageResultatItemProvider.dispose();
		if (questionItemProvider != null)
			questionItemProvider.dispose();
		if (reponseItemProvider != null)
			reponseItemProvider.dispose();
		if (boutonSoumettreItemProvider != null)
			boutonSoumettreItemProvider.dispose();
		if (boutonSuivantItemProvider != null)
			boutonSuivantItemProvider.dispose();
		if (boutonRetourItemProvider != null)
			boutonRetourItemProvider.dispose();
		if (etiquetteItemProvider != null)
			etiquetteItemProvider.dispose();
	}

}
